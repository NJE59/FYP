// <auto-generated />
using System;
using MediaPlayer.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediaPlayer.Core.Migrations
{
    [DbContext(typeof(MediaDBContext))]
    [Migration("20230910100829_AddedCreateListingAction")]
    partial class AddedCreateListingAction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("MediaPlayer.Core.Models.AlbumModel", b =>
                {
                    b.Property<int>("AlbumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ArtistID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlbumID");

                    b.HasIndex("ArtistID");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.ArtistModel", b =>
                {
                    b.Property<int>("ArtistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Biography")
                        .HasColumnType("TEXT");

                    b.HasKey("ArtistID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.ContributionModel", b =>
                {
                    b.Property<int>("ContributionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArtistID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContributorArtistID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContributionID");

                    b.HasIndex("ContributorArtistID");

                    b.HasIndex("TrackID");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.DiscModel", b =>
                {
                    b.Property<int>("DiscID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlbumID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DiscName")
                        .HasColumnType("TEXT");

                    b.Property<int>("DiscNum")
                        .HasColumnType("INTEGER");

                    b.HasKey("DiscID");

                    b.HasIndex("AlbumID");

                    b.ToTable("Discs");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.GenreModel", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GenreID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.ListingModel", b =>
                {
                    b.Property<int>("ListingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlaylistID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackPos")
                        .HasColumnType("INTEGER");

                    b.HasKey("ListingID");

                    b.HasIndex("PlaylistID");

                    b.HasIndex("TrackID");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.PlaylistModel", b =>
                {
                    b.Property<int>("PlaylistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlaylistName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PlaylistID");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.SongStyleModel", b =>
                {
                    b.Property<int>("SongStyleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackGenreGenreID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackID")
                        .HasColumnType("INTEGER");

                    b.HasKey("SongStyleID");

                    b.HasIndex("TrackGenreGenreID");

                    b.HasIndex("TrackID");

                    b.ToTable("SongStyles");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.TrackModel", b =>
                {
                    b.Property<int>("TrackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("DiscID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lyrics")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TrackDuration")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackNum")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrackID");

                    b.HasIndex("DiscID");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.AlbumModel", b =>
                {
                    b.HasOne("MediaPlayer.Core.Models.ArtistModel", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.ContributionModel", b =>
                {
                    b.HasOne("MediaPlayer.Core.Models.ArtistModel", "Contributor")
                        .WithMany("Contributions")
                        .HasForeignKey("ContributorArtistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaPlayer.Core.Models.TrackModel", "Track")
                        .WithMany("Contributions")
                        .HasForeignKey("TrackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contributor");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.DiscModel", b =>
                {
                    b.HasOne("MediaPlayer.Core.Models.AlbumModel", "Album")
                        .WithMany("Discs")
                        .HasForeignKey("AlbumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.ListingModel", b =>
                {
                    b.HasOne("MediaPlayer.Core.Models.PlaylistModel", "Playlist")
                        .WithMany("Listings")
                        .HasForeignKey("PlaylistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaPlayer.Core.Models.TrackModel", "Track")
                        .WithMany("Listings")
                        .HasForeignKey("TrackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.SongStyleModel", b =>
                {
                    b.HasOne("MediaPlayer.Core.Models.GenreModel", "TrackGenre")
                        .WithMany("TrackGenres")
                        .HasForeignKey("TrackGenreGenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaPlayer.Core.Models.TrackModel", "Track")
                        .WithMany("SongStyles")
                        .HasForeignKey("TrackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("TrackGenre");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.TrackModel", b =>
                {
                    b.HasOne("MediaPlayer.Core.Models.DiscModel", "Disc")
                        .WithMany("Tracks")
                        .HasForeignKey("DiscID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disc");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.AlbumModel", b =>
                {
                    b.Navigation("Discs");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.ArtistModel", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.DiscModel", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.GenreModel", b =>
                {
                    b.Navigation("TrackGenres");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.PlaylistModel", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("MediaPlayer.Core.Models.TrackModel", b =>
                {
                    b.Navigation("Contributions");

                    b.Navigation("Listings");

                    b.Navigation("SongStyles");
                });
#pragma warning restore 612, 618
        }
    }
}
