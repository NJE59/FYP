<views:MvxWpfView x:Class="MediaPlayer.WPF.Views.MediaLibraryView"
                  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                  xmlns:local="clr-namespace:MediaPlayer.WPF.Views"
                  xmlns:extensions="clr-namespace:MediaPlayer.WPF.Classes"
                  xmlns:views="clr-namespace:MvvmCross.Platforms.Wpf.Views;assembly=MvvmCross.Platforms.Wpf"
                  xmlns:mvx="clr-namespace:MvvmCross.Platforms.Wpf.Binding;assembly=MvvmCross.Platforms.Wpf"
                  xmlns:i="http://schemas.microsoft.com/xaml/behaviors" 
                  xmlns:viewmodels="clr-namespace:MediaPlayer.Core.ViewModels;assembly=MediaPlayer.Core"
                  d:DataContext="{d:DesignInstance Type=viewmodels:MediaLibraryViewModel}"
                  mc:Ignorable="d">
    <views:MvxWpfView.Resources>
    </views:MvxWpfView.Resources>
    <DockPanel>
        <Menu x:Name="TopMenu" DockPanel.Dock="Top">
            <MenuItem Header="File">
                <MenuItem Header=" = Open" />
                <Separator />
                <MenuItem Header="Exit" />
            </MenuItem>
            <MenuItem Header="Playlists">
                <MenuItem Header="Create Playlist" />
                <MenuItem Header="Playlists" ItemsSource="{Binding DisplayPlaylists}">
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <MenuItem Header="{Binding PlaylistName}" />
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
            </MenuItem>
        </Menu>

        <StatusBar x:Name="PlayPanel" DockPanel.Dock="Bottom">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Row="0" Grid.ColumnSpan="5">
                <Slider Minimum="0"
                        Maximum="{Binding LoadedTrack.ControlDuration}"
                        Width="{Binding Path=ActualWidth, ElementName=PlayPanel}"
                        extensions:SliderExtension.DragStartedCommand="{Binding SlideStartedCommand}"
                        extensions:SliderExtension.DragCompletedCommand="{Binding SlideCompletedCommand}"
                        Value="{Binding PlayerPosition, Mode=TwoWay}"
                        HorizontalContentAlignment="Stretch"
                        IsEnabled="{Binding IsTrackLoaded}"
                        Margin="5,0" />
            </StatusBarItem>
            <StatusBarItem Grid.Row="1" Grid.Column="1" HorizontalContentAlignment="Right">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="{Binding DisplayProgression}" />
                </StackPanel>
            </StatusBarItem>
            <StatusBarItem Grid.Row="1" Grid.Column="2" HorizontalAlignment="Center" HorizontalContentAlignment="Center">
                <WrapPanel>
                    <WrapPanel.Resources>
                        <Style TargetType="Button">
                            <Setter Property="Margin" Value="5,0" />
                        </Style>
                    </WrapPanel.Resources>
                    <Button Content="Stop" mvx:Bi.nd="Command StopCommand" />
                    <Button Content="Back" mvx:Bi.nd="Command SkipBackCommand" />
                    <ToggleButton Width="35"
                                  HorizontalAlignment="Center"
                                  mvx:Bi.nd="Command PlayPauseCommand"
                                  IsChecked="{Binding IsTrackPlaying, Mode=OneWay}">
                        <ToggleButton.Style>
                            <Style TargetType="ToggleButton">
                                <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="False">
                                        <Setter Property="Content" Value="Play"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="True">
                                        <Setter Property="Content" Value="Pause"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <Button Content="Fwrd" mvx:Bi.nd="Command SkipForwardCommand" />
                    <Slider x:Name="VolumeSlider"
                            Minimum="0"
                            Maximum="100"
                            Interval="1"
                            Value="{Binding PlayerVolume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Width="50"
                            AutoToolTipPlacement="BottomRight" />
                </WrapPanel>
            </StatusBarItem>
        </StatusBar>

        <DockPanel x:Name="NavigationPanel" DockPanel.Dock="Left" Width="150">
            <TextBox DockPanel.Dock="Bottom"
                     BorderBrush="Black"
                     Text="{Binding NewPlaylistName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <Button DockPanel.Dock="Bottom"
                    Content="Create New Playlist"
                    Margin="2"
                    IsEnabled="{Binding CanCreatePlaylist}"
                    mvx:Bi.nd="Command CreateNewPlaylistCommand" />
            <StackPanel>
                <StackPanel.Resources>
                    <Style TargetType="Button">
                        <Setter Property="Margin" Value="0,10" />
                    </Style>
                </StackPanel.Resources>
                <Button Content="Artists" mvx:Bi.nd="Command ShowArtistsCommand" />
                <Button Content="Albums" mvx:Bi.nd="Command ShowAlbumsCommand" />
                <Button Content="Genres" mvx:Bi.nd="Command ShowGenresCommand" />
                <Button Content="Playlists" mvx:Bi.nd="Command ShowPlaylistsCommand" />
                <Button Content="Songs" mvx:Bi.nd="Command ShowTracksCommand" />
            </StackPanel>
        </DockPanel>

        <Grid x:Name="QueuePanel" DockPanel.Dock="Right" Width="150">
            <ListView ItemsSource="{Binding TrackQueue}"
                      SelectedIndex="{Binding SelectedQueueIndex, Mode=TwoWay}">
                <ListView.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Play Track" mvx:Bi.nd="Command JumpQueueCommand" />
                        <MenuItem Header="Remove from Queue" mvx:Bi.nd="Command RemoveTrackCommand" />
                        <MenuItem Header="Clear Queue" mvx:Bi.nd="Command ClearQueueCommand" />
                    </ContextMenu>
                </ListView.ContextMenu>
                <ListView.View>
                    <GridView>
                        <GridViewColumn DisplayMemberBinding="{Binding TrackName}" />
                        <GridViewColumn DisplayMemberBinding="{Binding DisplayDuration}" Width="Auto" />
                    </GridView>
                </ListView.View>
            </ListView>
        </Grid>
                
        <Grid x:Name="MainViewPanel">
            <Grid.Resources>
                <Style TargetType="extensions:CustomDataGrid">
                    <Setter Property="AutoGenerateColumns" Value="False" />
                    <Setter Property="EnableRowVirtualization" Value="True" />
                    <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
                    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
                    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
                </Style>
            </Grid.Resources>
            <extensions:CustomDataGrid x:Name="dgArtists"
                                       Visibility="Collapsed"
                                       IsShowing="{Binding ShowingArtists}"
                                       ItemsSource="{Binding DisplayArtists}"
                                       SelectedItem="{Binding SelectedArtist, Mode=TwoWay}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding ShowArtistTracksCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Play" mvx:Bi.nd="Command PlayArtistCommand" />
                        <MenuItem Header="Add to Queue" mvx:Bi.nd="Command AddArtistCommand" />
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Name" 
                                        Binding="{Binding ArtistName}"
                                        Width="*" />
                </DataGrid.Columns>
            </extensions:CustomDataGrid>
            <extensions:CustomDataGrid x:Name="dgAlbums"
                                       Visibility="Collapsed"
                                       IsShowing="{Binding ShowingAlbums}"
                                       ItemsSource="{Binding DisplayAlbums}"
                                       SelectedItem="{Binding SelectedAlbum, Mode=TwoWay}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding ShowAlbumTracksCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Play" mvx:Bi.nd="Command PlayAlbumCommand">
                            <MenuItem Header="Album" mvx:Bi.nd="Command PlayAlbumCommand" />
                            <MenuItem Header="Artist" mvx:Bi.nd="Command PlayArtistCommand" />
                        </MenuItem>
                        <MenuItem Header="Add to Queue" mvx:Bi.nd="Command AddAlbumCommand">
                            <MenuItem Header="Album" mvx:Bi.nd="Command AddAlbumCommand" />
                            <MenuItem Header="Artist" mvx:Bi.nd="Command AddArtistCommand" />
                        </MenuItem>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Album Name"
                                        Binding="{Binding AlbumName}"
                                        IsReadOnly="True" />
                    <DataGridTextColumn Header="Artist Name"
                                        Binding="{Binding AlbumArtistName}"
                                        IsReadOnly="True" />
                    <DataGridTextColumn Header="Year"
                                        Binding="{Binding ReleaseYear}"
                                        IsReadOnly="True" />
                </DataGrid.Columns>
            </extensions:CustomDataGrid>
            <extensions:CustomDataGrid x:Name="dgGenres"
                                       Visibility="Collapsed"
                                       IsShowing="{Binding ShowingGenres}"
                                       ItemsSource="{Binding DisplayGenres}"
                                       SelectedItem="{Binding SelectedGenre, Mode=TwoWay}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding ShowGenreTracksCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Play Genre" mvx:Bi.nd="Command PlayGenreCommand" />
                        <MenuItem Header="Add Genre to Queue" mvx:Bi.nd="Command AddGenreCommand" />
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Gerne Name"
                                        Binding="{Binding GenreName}"
                                        Width="SizeToHeader"
                                        IsReadOnly="True" />
                </DataGrid.Columns>

            </extensions:CustomDataGrid>
            <extensions:CustomDataGrid x:Name="dgPlaylists"
                                       Visibility="Collapsed"
                                       IsShowing="{Binding ShowingPlaylists}"
                                       ItemsSource="{Binding DisplayPlaylists}"
                                       SelectedItem="{Binding SelectedPlaylist}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding ShowPlaylistTracksCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Playlist Name"
                                        Binding="{Binding PlaylistName}"
                                        Width="SizeToHeader"
                                        IsReadOnly="True" />
                </DataGrid.Columns>
            </extensions:CustomDataGrid>
            <extensions:CustomDataGrid x:Name="dgTracks"
                                       Visibility="Visible"
                                       IsShowing="{Binding ShowingTracks}"
                                       ItemsSource="{Binding DisplayTracks}"
                                       SelectedItem="{Binding SelectedTrack, Mode=TwoWay}">
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Play" mvx:Bi.nd="Command PlayTrackCommand">
                            <MenuItem Header="Song" mvx:Bi.nd="Command PlayTrackCommand" />
                            <MenuItem Header="Album" mvx:Bi.nd="Command PlayAlbumCommand" />
                            <MenuItem Header="Artist" mvx:Bi.nd="Command PlayArtistCommand" />
                        </MenuItem>
                        <MenuItem Header="Add to Queue" mvx:Bi.nd="Command AddTrackCommand">
                            <MenuItem Header="Song" mvx:Bi.nd="Command AddTrackCommand" />
                            <MenuItem Header="Album" mvx:Bi.nd="Command AddAlbumCommand" />
                            <MenuItem Header="Artist" mvx:Bi.nd="Command AddArtistCommand" />
                        </MenuItem>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Album Name"
                                        Binding="{Binding AlbumName}"
                                        Width="SizeToHeader"
                                        IsReadOnly="True" />
                    <DataGridTextColumn Header="Track Number"
                                        Binding="{Binding TrackNum}"
                                        Width="SizeToHeader"
                                        IsReadOnly="True" />
                    <DataGridTextColumn Header="Track Name"
                                        Binding="{Binding TrackName}"
                                        IsReadOnly="True" />
                </DataGrid.Columns>
            </extensions:CustomDataGrid>
            <extensions:CustomDataGrid x:Name="dgArtistTracks"
                                       Visibility="Collapsed"
                                       IsShowing="{Binding ShowingArtistTracks}"
                                       ItemsSource="{Binding DisplayArtistTracks}"
                                       SelectedItem="{Binding SelectedTrack, Mode=TwoWay}">
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Play" mvx:Bi.nd="Command PlayTrackCommand">
                            <MenuItem Header="Song" mvx:Bi.nd="Command PlayTrackCommand" />
                            <MenuItem Header="Album" mvx:Bi.nd="Command PlayAlbumCommand" />
                            <MenuItem Header="Artist" mvx:Bi.nd="Command PlayArtistCommand" />
                        </MenuItem>
                        <MenuItem Header="Add to Queue" mvx:Bi.nd="Command AddTrackCommand">
                            <MenuItem Header="Song" mvx:Bi.nd="Command AddTrackCommand" />
                            <MenuItem Header="Album" mvx:Bi.nd="Command AddAlbumCommand" />
                            <MenuItem Header="Artist" mvx:Bi.nd="Command AddArtistCommand" />
                        </MenuItem>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Album Name"
                                        Binding="{Binding AlbumName}"
                                        Width="SizeToHeader"
                                        IsReadOnly="True" />
                    <DataGridTextColumn Header="Track Number"
                                        Binding="{Binding TrackNum}"
                                        Width="SizeToHeader"
                                        IsReadOnly="True" />
                    <DataGridTextColumn Header="Track Name"
                                        Binding="{Binding TrackName}"
                                        IsReadOnly="True" />
                </DataGrid.Columns>
            </extensions:CustomDataGrid>
            <extensions:CustomDataGrid x:Name="dgAlbumTracks"
                                       Visibility="Collapsed"
                                       IsShowing="{Binding ShowingAlbumTracks}"
                                       ItemsSource="{Binding DisplayAlbumTracks}"
                                       SelectedItem="{Binding SelectedTrack, Mode=TwoWay}">
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Play" mvx:Bi.nd="Command PlayTrackCommand">
                            <MenuItem Header="Song" mvx:Bi.nd="Command PlayTrackCommand" />
                            <MenuItem Header="Album" mvx:Bi.nd="Command PlayAlbumCommand" />
                            <MenuItem Header="Artist" mvx:Bi.nd="Command PlayArtistCommand" />
                        </MenuItem>
                        <MenuItem Header="Add to Queue" mvx:Bi.nd="Command AddTrackCommand">
                            <MenuItem Header="Song" mvx:Bi.nd="Command AddTrackCommand" />
                            <MenuItem Header="Album" mvx:Bi.nd="Command AddAlbumCommand" />
                            <MenuItem Header="Artist" mvx:Bi.nd="Command AddArtistCommand" />
                        </MenuItem>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Album Name"
                                        Binding="{Binding AlbumName}"
                                        Width="SizeToHeader"
                                        IsReadOnly="True" />
                    <DataGridTextColumn Header="Track Number"
                                        Binding="{Binding TrackNum}"
                                        Width="SizeToHeader"
                                        IsReadOnly="True" />
                    <DataGridTextColumn Header="Track Name"
                                        Binding="{Binding TrackName}"
                                        IsReadOnly="True" />
                </DataGrid.Columns>
            </extensions:CustomDataGrid>
            <extensions:CustomDataGrid x:Name="dgGenreTracks"
                                       Visibility="Collapsed"
                                       IsShowing="{Binding ShowingGenreTracks}"
                                       ItemsSource="{Binding DisplayGenreTracks}"
                                       SelectedItem="{Binding SelectedTrack, Mode=TwoWay}">
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Play" mvx:Bi.nd="Command PlayTrackCommand">
                            <MenuItem Header="Song" mvx:Bi.nd="Command PlayTrackCommand" />
                            <MenuItem Header="Album" mvx:Bi.nd="Command PlayAlbumCommand" />
                            <MenuItem Header="Artist" mvx:Bi.nd="Command PlayArtistCommand" />
                        </MenuItem>
                        <MenuItem Header="Add to Queue" mvx:Bi.nd="Command AddTrackCommand">
                            <MenuItem Header="Song" mvx:Bi.nd="Command AddTrackCommand" />
                            <MenuItem Header="Album" mvx:Bi.nd="Command AddAlbumCommand" />
                            <MenuItem Header="Artist" mvx:Bi.nd="Command AddArtistCommand" />
                        </MenuItem>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Album Name"
                                        Binding="{Binding AlbumName}"
                                        Width="SizeToHeader"
                                        IsReadOnly="True" />
                    <DataGridTextColumn Header="Track Number"
                                        Binding="{Binding TrackNum}"
                                        Width="SizeToHeader"
                                        IsReadOnly="True" />
                    <DataGridTextColumn Header="Track Name"
                                        Binding="{Binding TrackName}"
                                        IsReadOnly="True" />
                </DataGrid.Columns>
            </extensions:CustomDataGrid>
            <extensions:CustomDataGrid x:Name="dgPlaylistTracks"
                                       Visibility="Collapsed"
                                       IsShowing="{Binding ShowingPlaylistTracks}"
                                       ItemsSource="{Binding DisplayPlaylistTracks}"
                                       SelectedItem="{Binding SelectedTrack, Mode=TwoWay}">
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Play" mvx:Bi.nd="Command PlayTrackCommand">
                            <MenuItem Header="Song" mvx:Bi.nd="Command PlayTrackCommand" />
                            <MenuItem Header="Playlist" mvx:Bi.nd="Command PlayPlaylistCommand" />
                        </MenuItem>
                        <MenuItem Header="Add to Queue" mvx:Bi.nd="Command AddTrackCommand">
                            <MenuItem Header="Song" mvx:Bi.nd="Command AddTrackCommand" />
                            <MenuItem Header="Playlist" mvx:Bi.nd="Command AddPlaylistCommand" />
                        </MenuItem>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Track Name"
                                        Binding="{Binding TrackName}"
                                        IsReadOnly="True" />
                </DataGrid.Columns>
            </extensions:CustomDataGrid>

        </Grid>
    </DockPanel>
</views:MvxWpfView>
